<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[面试]]></title>
    <url>%2F2018%2F02%2F11%2Fblog1%2F</url>
    <content type="text"><![CDATA[面试遇到的一些问题前言&emsp;&emsp;面试一直都是每个求职者面临的一道难题，个人认为自身的技术和运气各占一半。在这几个月之间博主也或多或少的参加了几次面试。简单分享一下我遇到的一些问题（希望对大家在求职过程中有一定帮助吧）。 弹性盒子布局flex&emsp;&emsp;这是我最近一次面试遇到的问题，一开始听到这个整个人都懵逼了，flex是什么？那面试过后回家一查才发现是弹性盒子布局，尽管自己的确不熟悉这个，但是在ionic（基于angular的移动端框架）中其实就是类似采用了这个布局，当时也没想到（尴尬啊）。1、基本概念采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 display: flex;定义盒子模型，flex布局兼容性还不是很好，最好采用兼容写法（-webkit,-moz,-o）类似这样 2、布局 flex-direction属性主轴方向（子元素的布局方向）flex-direction: row | row-reverse | column | column-reverse;依次为（默认的水平左到右），（水平右到左），（垂直上到下），（垂直下到到上） flex-wrap属性（换行） nowrap (不换行)默认wrap (换行，且往下一行换)wrap-reverse (换行，且往上一行换) flex-flow属性 是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 justify-content属性 （水平轴的对齐方式） flex-start（默认值）：左对齐flex-end：右对齐center： 居中space-between：两端对齐，项目之间的间隔都相等。space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 align-items属性 （垂直轴的对齐方式） flex-start：交叉轴的起点对齐。flex-end：交叉轴的终点对齐。center：交叉轴的中点对齐。baseline: 项目的第一行文字的基线对齐。stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 align-content属性（定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。） flex-start：与交叉轴的起点对齐。flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。 align-self属性（子元素自身） auto：默认flex-start：起点对齐。flex-end：终点对齐。center：中点对齐。baseline: 项目的第一行文字的基线对齐。stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 order属性（排序）定义项目的排列顺序。数值越小，排列越靠前，默认为0。 flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 flex属性该属性是flex-grow, flex-shrink和flex-basis的简写，默认值为0 1 auto。后两个属性可选。 具体实现效果如下：123456789101112&lt;style&gt;.box &#123; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-end;&#125;&lt;/style&gt;&lt;div class="box"&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;/div&gt; 12345678910111213&lt;style&gt;.box &#123; display: flex; justify-content: space-between;&#125;.box span &#123; aglin-self: flex-end;&#125;&lt;/style&gt;&lt;div class="box"&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;/div&gt; 12345678910111213141516171819202122&lt;style&gt;.box &#123; display: flex; flex-wrap: wrap; justify-content: space-between;&#125;.row &#123; flex-basis: 100%; display: flex; justify-content: space-between;&#125;&lt;/style&gt;&lt;div class="box"&gt; &lt;div class="row"&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;/div&gt;&lt;/div&gt; 具体的布局还是要自己去研究（flex涉及的属性还是比较多的） 基础知识往往面试官会问一些基本概念和一些常用的方法 如何垂直居中一般就通过定位来实现，还有一种就是用flex布局实现（博主之前的确不知道） 行级和块级标签的区别（常识） css3新增了那些属性（border-radius, text-shadow, box-shadow等等） css的选择符有哪些（class, ID, 标签， 群组选择符h1,span这种） js创建对象的方式 var my = new Object();object构造函数创建var my = {}; 使用对象字面量表示法使用工厂模式创建对象 123456789101112function createPerson(name,age,job)&#123; var o = new Object(); o.name = name; o.age = age; o.job = job; o.sayName = function()&#123; alert(this.name); &#125;; return o; var person1 = createPerson('tony',29,'teacher');var person2 = createPerson('ndx',20,'student');&#125; 还有几种网上都有，知道自己常用的几种。 如何清除浮动用伪类标签（before,after）clear属性overflow也可以 javascript的数据类型（字符串，布尔，数组，对象，数字，字符串，null，undefined） 其实这些都是我们平时最常用的，也是经常遇到的，但往往忽略了，或是面试官换个角度去问就不知道了（当时博主居然连text-shadow这种是css3新增的都不知道=：=表示完全没有区分过哪些是css3的）。所以在面试前还是要好好准备一下，把一些基础概念了解一下还是非常有必要的。 一些面试题（有些时间长了就忘了） 用js写一个把字符串首位空格去掉的函数1234function way(str) &#123; return str.replace(/(^\s*)|(\s*$)/g, ""); &#125; 用正则一句话就解决了，往往我们正则用在判断密码或电话号码上面，其实它还是有许多强大功能的。 用css写一个三角形12345678.box &#123; width:0; height:0; border-left:30px solid transparent; border-right:30px solid transparent; border-bottom:30px solid #000000;&#125;` 运用border属性可以画出许多形状（网上有许多） 用伪类写如下一个标题 123456789101112131415161718192021222324252627&lt;style&gt;.box &#123; width: 200px; text-align: center; font-size: 20px; color: #000; position: relative;&#125;.box:before, .box:after &#123; content: ""; position: absolute; top: 50%; transform: translateY(-50%); background: #494949; width: 9%; height: 2px; &#125;.box:before &#123; left: 10%;&#125;.box:after &#123; right: 10%;&#125;&lt;/style&gt;&lt;div class="box"&gt; Hello world!&lt;/div&gt; 。。。。。。。。。。]]></content>
      <categories>
        <category>note</category>
        <category>way</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[notepad]]></title>
    <url>%2F2018%2F02%2F05%2Fnotepad%2F</url>
    <content type="text"><![CDATA[Github1、保存代码，public，任何人都可以访问，private付费会员2、协同开发，修改别人的代码先fork别人的库到自己的账户内，修改代码创建一个改动提交create pull requests对方收到pull requests后，合并提交的改动merge changes request请求pull request提交一个改变push推merge合并fetch获取publish发布repository库 let声明为局部变量 箭头函数函数名=参数名=&gt;返回值 图片预览files对象Filelist：上传文件的数据保存在Filelist中，类型是数组 multiple:input可以上传多个文件，按住Ctrl键+多个文件 FileReader对象读取图片对象 readAsDataURL()方法把图片读取为DataURL格式Filereader的事件 load——加载成功loadend——加载结束 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;tt&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;input type="file" id="icon" multiple/&gt; &lt;img class="preview" src="img/head.jpg" style="width: 200px;height: 200px" alt="" /&gt; &lt;script&gt; var preview=document.querySelector('.preview'); var fr=new FileReader(); var icon=document.querySelector('#icon'); icon.addEventListener('change', function()&#123; //验证大小 if(this.files[0].size&gt;1024*1024) &#123; console.log('wrong1'); return false; &#125; //验证类型 if(!/image/.test(this.files[0].type))&#123; console.log("wrong2"); return false; &#125; //把上传文件读取到filereader中 fr.readAsDataURL(this.files[0]); //fr加载文件成功后事件 //this.result:文件的数据 fr.addEventListener('load', function()&#123; console.log(this.result); preview.src=this.result; &#125;); console.log(this.files[0]); &#125;); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; sql语句排序 less动态css，用程序的思路写csscss的自定义变量123456:root &#123; --c: #000;&#125;body &#123; background-color: var (--c);&#125; currentColor: 当前字体的颜色 less语法的嵌套]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前后端的交互]]></title>
    <url>%2F2018%2F02%2F01%2Farticle%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;身为一名前端工程师，非常需要了解一点后端知识，这样既可以在工作中与后端开发者更好的合作，也是对自身开发的一个提高。本篇文章，是我对前后端交互知识一些记录，在未来也会不断去更新和整理。 前后端交互1、搭建环境（PS：以下软件的安装如有问题请自行百度，网上资料比较齐全，大部分应该没什么问题） mysql：免费的数据库管理系统，作为学习用是非常适合的 php：处理数据库的超文本预处理器 phpmyadmin：是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。 还有就是服务器Apache。。这个看看就好了。用于学习方面，个人推荐云服务器（阿里云，腾讯云…..）学生的话有优惠还是比较良心的。 看到这里或许有些小伙伴会吐槽，要装那么多软件吗？而且哪来的服务器啊！其实有现成的建站集成软件包，安装好之后在本地帮你搭配好了环境。xampp这里我就用xampp为例安装完之后打开你安装文件夹目录下的/htdocs，里面就是存放页面的地方，只有在这里打开的网页才算是从服务器里启动。（PS：可以全删了，自己建个简单的html文件） 2、如何使用xampp打开xampp（公司电脑上装的貌似是qampp，其实一样啦）看到几个选项，我们这里只需要启动mysql和Apache就可以了，至于其他的有兴趣就自己去研究吧 如果下方没有报错，这时打开你的浏览器输入localhost或者127.0.0.1就应该看到如下画面 3、新建本地数据库如果xampp安装没有问题的话在浏览器里输入127.0.0.1/phpmyadmin会出现如下图（PS：可能有的会让你输账号密码，默认都为root） 进去后先新建数据库 再建数据表 完成后如下图 4、数据库的基本操作（增删改查）点击SQL，在这里输代码对数据库进行操作 增加 insert into member(username,pwd)values(&#39;tom&#39;,&#39;123456&#39;);member（表名）username，pwd（字段名） values（增加的内容） 查询 不带条件 select username,pwd from member如果为*就是全部字段，注意带条件的 select username from member where id=1 查询编号为1的用户名 删除 带条件 delete from member where id=3（不带条件的话就全删了） 修改 带条件update member set pwd=&#39;123123&#39; where id=3（同样如果不加条件就是全部修改了） 这些都是数据的基本指令 5、ajax的异步交互]]></content>
      <categories>
        <category>data</category>
      </categories>
      <tags>
        <tag>sina</tag>
        <tag>anjax</tag>
        <tag>mysql</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github的简单攻略]]></title>
    <url>%2F2018%2F01%2F30%2Fgithub1%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;相信对于许多从事计算机行业或是程序开发的小伙伴来说Github并不陌生，网上也有许多资料，那本篇文章是我作为一个初入前端的菜鸟的一些学习心得（大神请绕道），针对那些没用过或不知道github的小白们的一个扫盲。 什么是Github&emsp;&emsp;GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。 简单来说：Github对于个人而言方便了资源的传播与分享，对于团队对来说提高了项目的效率。 Github的环境搭配 首先，进入Github官网（全英文），点击Sign in注册属于自己的一个账户（PS：牢记自己的账户与密码，注意账号安全） 安装Git（在安装Git之前，确保你电脑已经安装了Node.js） ——进入官网，点击Downloads如下 根据自己电脑的系统选择版本号 如何使用Github1、创建你的库进入你的Github账户 完成后此时你的仓库中只有一个README.md文件 2、创建和激活Github公钥这时有的小伙伴会问什么是公钥，简单来说公钥是你的电脑和你的Github账号通信的一个开关。 注意：一个账号可以拥有多个公钥，但是不同电脑上的公钥是不同的，如果你想在另一台设备上操作同一个账号你需要重新生成公钥。 新建一个文件夹，进入后鼠标右键打开git的编译器（Git Bush Here）1$ git init 初始化该文件夹，随便在里面放一点东西，此时在你建的文件夹中应该有一个.git文件 然后确认你的账号与邮箱 12$ git config --global user.name "你的Github账号名"（PS：不是仓库名）$ git config --global user.email "你注册的邮箱" 生成公钥 1$ cd ~/.ssh 检查是否有.ssh的文件夹 输入ls，列出文件夹下的内容。下图说明存在 1$ ssh-keygen -t rsa -C "你的邮箱" 一直回车，如果出现（y/n）输入y，不然会失败 复制公钥1$ cat id_rsa.pub 复制下方的代码 回到你的Github账号 测试是否公钥有效（回到你想上传的那个文件夹）1$ ssh -T git@github.com 若如下图所示，说明成功了 3、上传文件 选择需要上传的文件（PS：空文件不行） 1$ git add . (全部上传，你也可以单独选择) 创建仓库分支 1$ git commit -m "first commit" 与远程仓库相连 1$ git remote add origin https://github.com/ndx1996/test2.git 上传文件（会让你输入Github的账号和密码） 1$ git push -u origin master 若成功了，回到你的Github仓库就可以看到你上传的文件了 其他对于仓库增删改的代码等我整理好了再发布。当然大家也可以自行百度（毕竟我也是度娘教出来的） 若有不足之处也欢迎各位小伙伴指出，大家一起进步：)]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>sina</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello world]]></title>
    <url>%2F2018%2F01%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>lala</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端的适配]]></title>
    <url>%2F2018%2F01%2F15%2Farticle2%2F</url>
    <content type="text"><![CDATA[前言一些我在久游网实习期间关于移动端适配的小技巧 久游移动端的适配1、让设备自适应（px）1&lt;meta name="viewport" content="width=750, target-densitydpi=device-dpi, minimal-ui, user-scalable=no"&gt; 2、如果使用rem的自适应1&lt;meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=no"&gt;` 此时需要在js中根据屏幕变化配置rem的根font-size 代码如下123456789101112131415161718&lt;script&gt; (function (doc, win) &#123; var docEl = doc.documentElement, resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize', recalc = function () &#123; var clientWidth = docEl.clientWidth; if (!clientWidth) return; if(clientWidth&gt;=750)&#123; docEl.style.fontSize = '100px'; &#125;else&#123; docEl.style.fontSize = 100 * (clientWidth / 750) + 'px'; &#125; &#125;; if (!doc.addEventListener) return; win.addEventListener(resizeEvt, recalc, false); doc.addEventListener('DOMContentLoaded', recalc, false); &#125;)(document, window);&lt;/script&gt; 组件模块 网址：http://jsmodern.applinzi.com/ 一些插件 wow.js （酷炫的按钮特效）swiper.js （移动端滑动效果为主）]]></content>
      <categories>
        <category>way</category>
      </categories>
      <tags>
        <tag>sina</tag>
        <tag>meta</tag>
      </tags>
  </entry>
</search>
